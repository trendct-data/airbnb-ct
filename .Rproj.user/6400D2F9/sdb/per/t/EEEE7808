{
    "collab_server" : "",
    "contents" : "# This scraper was inspired by Randy Olson's weather chart python scripts\n# http://www.randalolson.com/2015/08/13/the-new-york-times-weather-chart-redux/\n\n# Generates an array of dates based on what you're looking at\ndate <- seq(as.Date(\"2015/1/1\"), as.Date(\"2016/1/1\"), \"day\")\ndates <- data.frame(date)\ndates$date <- as.character(dates$date)\ndates$date <- gsub(\"\\\\-\", \"/\", dates$date)\n\n# Run these lines if you need to try again\n# tryagain <- read.csv(\"leftovers.csv\", stringsAsFactors=FALSE)\n# dates <- tryagain\n\ndates_list <- 1:nrow(dates)\n\n\n\n# Just a list of cities and airport codes for reference\n# Hartford, KHFD\n# New Haven, KHVN !NOPE\n# Stamford, KHPN !NOPE\n# Groton - New London, KGON\n# Stratford, KBDR\n\n# INSERT AIRPORT CODE HERE\nap <- \"KGON\"\n\n# If you're rerunning this script with another airport code, \n# be sure to run this command below to clear the memory\n\nrm(master_list)\n# Loop to go scrape wunderground.com historical data based on the dates in the array\n# Using the rvest package\n\nlibrary(rvest)\n\n  for (i in dates_list) {\n    \n    actual_mean_temp <-0\n    actual_max_temp <- 0\n    actual_min_temp <- 0\n    average_max_temp <- 0\n    average_min_temp <- 0\n    record_max_temp <- 0\n    record_min_temp  <- 0\n    record_max_temp_year <- 0\n    record_min_temp_year <- 0\n    \n    date <- dates$date[i]\n    \n    link <- paste0(\"http://www.wunderground.com/history/airport/\",ap,\"/\",date,\"/DailyHistory.html\")\n    \n    wu <- html(link)\n    \n    actual_mean_temp <- wu %>% \n      html_node(\"tr:nth-child(2) .wx-value\") \n    if (is.null(actual_mean_temp)) {\n      actual_mean_temp <- 999\n    } else {\n      actual_mean_temp <- actual_mean_temp  %>%\n        html_text() %>%\n        as.numeric()\n    }\n\n    # Sometimes the code picked up isn't consistent. So to prevent errors,\n    # it's replaced with a 999 so it can be identified later to be replaced\n    \n    actual_max_temp <- wu %>% \n      html_node(\"tr:nth-child(3) .indent+ td .wx-value\") \n    if (is.null(actual_max_temp)) {\n      actual_max_temp <- 999\n    } else {\n      actual_max_temp <- actual_max_temp %>%\n        html_text() %>%\n        as.numeric()\n    }\n    \n    actual_min_temp <- wu %>% \n      html_node(\"tr:nth-child(4) .indent+ td .wx-value\")     \n    if (is.null(actual_min_temp)) {\n      actual_min_temp <- 999\n    } else {\n      actual_min_temp <- actual_min_temp %>%\n        html_text() %>%\n        as.numeric()\n    }\n    \n    average_max_temp <- wu %>% \n      html_node(\"tr:nth-child(3) td:nth-child(3) .wx-value\") \n    if (is.null(average_max_temp)) {\n      average_max_temp <- 999\n    } else {\n      average_max_temp <- average_max_temp %>%\n        html_text() %>%\n        as.numeric()\n    }\n    \n    average_min_temp <- wu %>% \n      html_node(\"tr:nth-child(4) td:nth-child(3) .wx-value\") \n    if (is.null(average_min_temp)) {\n      average_min_temp <- 999\n    } else {\n      average_min_temp <- average_min_temp %>%\n        html_text() %>%\n        as.numeric()\n    }\n    \n    record_max_temp <- wu %>% \n      html_node(\"tr:nth-child(3) td:nth-child(4) .wx-value\") \n    if (is.null(record_max_temp)) {\n      record_max_temp <- 999\n    } else {\n      record_max_temp <- record_max_temp %>%\n        html_text() %>%\n        as.numeric()\n    }\n    \n    record_min_temp  <- wu %>% \n      html_node(\"tr:nth-child(4) td:nth-child(4) .wx-value\") \n    if (is.null(record_min_temp)) {\n      record_min_temp <- 999\n    } else {\n      record_min_temp <- record_min_temp %>%\n        html_text() %>%\n        as.numeric()\n    }\n    \n    record_max_temp_year<- wu %>% \n      html_node(\"tr:nth-child(3) td:nth-child(4)\")    \n    if (is.null(record_max_temp_year)) {\n      record_max_temp_year <- 999\n    } else {\n      record_max_temp_year <- record_max_temp_year %>%\n        html_text() \n      record_max_temp_year <- gsub('.*\\\\(', '', record_max_temp_year)\n      record_max_temp_year <- gsub('\\\\)', '', record_max_temp_year)\n      record_max_temp_year <- as.numeric(record_max_temp_year)\n    }\n    \n    record_min_temp_year<- wu %>% \n      html_node(\"tr:nth-child(4) td:nth-child(4)\") \n    if (is.null(record_min_temp_year)) {\n      record_min_temp_year <- 999\n    } else {\n      record_min_temp_year <- record_min_temp_year %>%\n        html_text() \n      record_min_temp_year <- gsub('.*\\\\(', '', record_min_temp_year)\n      record_min_temp_year <- gsub('\\\\)', '', record_min_temp_year)\n      record_min_temp_year <- as.numeric(record_min_temp_year)\n    }\n    \n    city_df <- data.frame(date, actual_mean_temp, actual_min_temp, actual_max_temp, average_min_temp,\n                          average_max_temp, record_min_temp, record_max_temp, record_min_temp_year, \n                          record_max_temp_year)\n    \n    if (exists(\"master_list\")) {\n      master_list <- rbind(master_list, city_df)\n    } else { master_list <- city_df }\n  }\n  \n  # Two CSV files are generated. One with errors and one without.\n\n  clean <- subset(master_list, record_min_temp_year<=2016 & record_min_temp_year >=1800)\n  leftovers <- subset(master_list, !(record_min_temp_year<=2016 & record_min_temp_year >=1800))\n  \n  # Rename this csv below if you're running this a second time for cleaner results\n  filename <- paste0(ap, \".csv\")\n  write.csv(clean, filename)\n  write.csv(leftovers, \"leftovers.csv\")\n  \n  # Clean up the errors by visiting the dates manually\n  # or take the leftovers csv and run it through the script above\n  # If you do so, be sure to rename the output so it doesn't overwrite what you've already generated",
    "created" : 1452038551694.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3655165305",
    "id" : "EEEE7808",
    "lastKnownWriteTime" : 1452529758,
    "last_content_update" : 0,
    "path" : "~/Documents/Github/weather/wunderground_scraper.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}