{
    "collab_server" : "",
    "contents" : "library(rvest)\nlibrary(dplyr)\nlibrary(leaflet)\n\nrm(airbnb_df)\n\nurl_list <- read.csv(\"just_urls.csv\", stringsAsFactors=FALSE)\nurl_list <- url_list[c(\"link\")]\nurl_list <- unique(url_list)\n\nfor (i in 607:nrow(url_list)) {\n    link <- url_list$link[i]\n    \n    ab <- html(link)\n    \n    all_meta_attrs <- unique(unlist(lapply(lapply(ab %>% html_nodes(\"meta\"), html_attrs), names)))\n    \n    dat <- data.frame(lapply(all_meta_attrs, function(x) {\n      ab %>% html_nodes(\"meta\") %>% html_attr(x)\n    }))\n    \n    if ((is.null(dat)) | (nrow(dat)==35)) {\n      url <- link\n      latitude <- 999\n      longitude <- 999\n      locality <- \"nope\"\n      region <- \"nope\"\n      city <- \"nope\"\n      rating <- 9.9\n      price <- 999\n    } else {\n    colnames(dat) <- all_meta_attrs\n    \n    url <- link\n    \n    filtered <- dat %>% \n      select(content, property, itemprop) %>%\n      filter(property==\"airbedandbreakfast:location:latitude\" | \n               property==\"airbedandbreakfast:location:longitude\" | \n               property==\"airbedandbreakfast:locality\" | \n               property==\"airbedandbreakfast:region\"| \n               property==\"airbedandbreakfast:city\" | \n               property==\"airbedandbreakfast:rating\" |\n               itemprop==\"price\")\n    \n    latitude <- filtered %>%\n      filter(property==\"airbedandbreakfast:location:latitude\")\n    latitude <- as.character(latitude$content)\n    \n    longitude<- filtered %>%\n      filter(property==\"airbedandbreakfast:location:longitude\")\n    longitude <- as.character(longitude$content)\n    \n    locality<- filtered %>%\n      filter(property==\"airbedandbreakfast:locality\")\n    locality<- as.character(locality$content)\n    if (is.character(locality) && length(locality) == 0) {\n      locality <- \"\"\n    } else {\n      locality <- locality\n    }\n    region<- filtered %>%\n      filter(property==\"airbedandbreakfast:region\")\n    region<- as.character(region$content)\n    if (is.character(region) && length(region) == 0) {\n      region <- \"\"\n    } else {\n      region <- region\n    }\n    city<- filtered %>%\n      filter(property==\"airbedandbreakfast:city\")\n    city<- as.character(city$content)\n    if (is.character(city) && length(city) == 0) {\n      city <- \"\"\n    } else {\n      city <- city\n    }\n    \n    rating<- filtered %>%\n      filter(property==\"airbedandbreakfast:rating\")\n    rating<- as.character(rating$content)\n    if (is.character(rating) && length(rating) == 0) {\n      rating <- \"\"\n    } else {\n      rating <- rating\n    }\n    \n    price<- filtered %>%\n      filter(itemprop==\"price\")\n    price<- as.numeric(as.character(price$content))\n    if (length(price)==0) {\n      price <- 999\n    } else {\n      prince <- price\n    }\n    }\n    print(i)\n    air_listing <- data.frame(link, latitude, longitude, locality, region, city, rating, price)\n    if (exists(\"airbnb_df\")) {\n      airbnb_df <- rbind(airbnb_df, air_listing)\n    } else {\n    airbnb_df <- air_listing\n    }\n    \n}\n\nclean <- subset(airbnb_df, !(latitude==999))\nleftovers <- subset(airbnb_df, latitude==999)\nbackup_clean <- clean\n\nclean$latitude <- as.numeric(as.character(clean$latitude))\nclean$longitude <- as.numeric(as.character(clean$longitude))\nclean$rating <- as.numeric(as.character(clean$rating))\nclean$price <- as.numeric(as.character(clean$price))\n\nct <- read.csv(\"ctlist.csv\", stringsAsFactors=FALSE) # Brings in the file 'ctlist.csv'\n# Be sure to first set the working directory in R to where the file is listed\n\nlibrary(leaflet)\n\nlibrary(rgdal)\ncampus <- readOGR(dsn=\"shapes\", layer=\"ct_campuses\")\n\nm <- leaflet(clean) %>% addTiles('http://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',\n                              attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, Tiles courtesy of <a href=\"http://hot.openstreetmap.org/\" target=\"_blank\">Humanitarian OpenStreetMap Team</a>') \nm %>% setView(-72.690940, 41.651426, zoom = 8)\n\nm %>% addPolygons(data=campus, stroke=TRUE, weight=1, fillOpacity=.8, smoothFactor=.5, color=\"#f72a5f\") %>%\n  addCircles(~longitude, ~latitude, popup=paste0(\"$\",  clean$price, \" per night <br /><a href='\", clean$link, \"' target='_blank'>link</a>\"), weight = 3, radius=40, \n                 color=\"#0066cc\", stroke = TRUE, fillOpacity = clean$price*.01)\n\nlibrary(ctnamecleaner)\n\n?ctcorrelator\n\n\nctcorrelator(ctair_1, p=.9)\n\nctcorrelator(ctcorrelator )\n  \n\nctair_1 <- ctair[c(\"town\", \"airbnbs\")]\n",
    "created" : 1452038558966.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "783931422",
    "id" : "BD8DC061",
    "lastKnownWriteTime" : 1453256374,
    "last_content_update" : 0,
    "path" : "~/Documents/Github/airbnb_ct/airbnb_scraper.R",
    "project_path" : "airbnb_scraper.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}